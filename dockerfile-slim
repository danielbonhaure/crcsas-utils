

##########################
## Set GLOBAL arguments ##
##########################

# Set python version
ARG PYTHON_VERSION=3.10

# Set APP installation folder
ARG APP_HOME=/opt

# App data folder
ARG APP_DATA=/data



######################################
## Stage 1: Install Python packages ##
######################################

# Create image
FROM python:${PYTHON_VERSION}-slim AS py_builder

# Set environment variables
ARG DEBIAN_FRONTEND=noninteractive

# Set python environment variables
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# Install OS packages
RUN apt-get -y -qq update && \
    apt-get -y -qq upgrade && \
    apt-get -y -qq --no-install-recommends install \
        build-essential && \
    rm -rf /var/lib/apt/lists/*

# Set work directory
WORKDIR /usr/src/app

# Upgrade pip and install dependencies
COPY requirements.txt /tmp/requirements.txt
RUN python3 -m pip install --upgrade pip && \
    python3 -m pip wheel --no-cache-dir --no-deps \
    --wheel-dir /usr/src/app/wheels -r /tmp/requirements.txt



###############################################
## Stage 2: Copy Python installation folders ##
###############################################

# Create image
FROM python:${PYTHON_VERSION}-slim AS py_final

# set environment variables
ARG DEBIAN_FRONTEND=noninteractive

# Install OS packages
RUN apt-get -y -qq update && \
    apt-get -y -qq upgrade && \
    rm -rf /var/lib/apt/lists/*

# Install python dependencies from py_builder
COPY --from=py_builder /usr/src/app/wheels /wheels
RUN python3 -m pip install --upgrade pip && \
    python3 -m pip install --no-cache /wheels/* && \
    rm -rf /wheels



#############################################
## Stage 3: Setup and run final APP image ##
#############################################

# Create image
FROM py_final AS final_app_image

# Set environment variables
ARG DEBIAN_FRONTEND=noninteractive

# Load source folder
ARG APP_HOME

# Load data folder
ARG APP_DATA

# Install OS packages
RUN apt-get -y -qq update && \
    apt-get -y -qq --no-install-recommends install \
        # install Tini (https://github.com/krallin/tini#using-tini)
        tini \
        # to see process with pid 1
        htop \
        # to allow edit files
        vim && \
    rm -rf /var/lib/apt/lists/*

# Copy project
COPY ./*.py $APP_HOME

# Creata data folder
RUN mkdir -p $APP_DATA

# Add Tini (https://github.com/krallin/tini#using-tini)
ENTRYPOINT ["/usr/bin/tini", "-g", "--"]

# Run your program under Tini (https://github.com/krallin/tini#using-tini)
CMD [ "python", "--version"]
# or docker run your-image /your/program ...



# CONSTRUIR CONTENEDOR
#
# DOCKER_BUILDKIT=1 \
# docker build --force-rm \
#   --target final_app_image \
#   --tag ghcr.io/crc-sas/crcssa:utils \
#   --file dockerfile .

# docker push ghcr.io/crc-sas/crcssa:utils

# CORRER CONTENEDOR
#
# docker run --name crcsas-utils --volume $(pwd):/data --rm -t ghcr.io/crc-sas/crcssa:utils \
#   bash -c "ls /data/2023_Indices.nc | xargs python /opt/netcdf.py"
